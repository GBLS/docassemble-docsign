---
metadata:
  title: |
    Generate client documents
  tags: 
    - everyone    
---
features:
  question help button: True
---
modules:
  - docassemble.microsoftgraph.msgraph
  - .scan_for_vars
---
include:   
  - docassemble.gbls:basic-questions-gbls.yml  
  - manage_templates.yml
---
objects:
  - o365: MSGraphConnectionObject
  - folders: DADict.using(object_type=LazyFileList, auto_gather=False)
  - drive_contents: LazyFileList.using(auto_gather=False)  
---
default screen parts:
  under: |
    [Edit your settings](${url_action('review_settings')})
---
mandatory: True
code: |
  # Initialize the objects that will be answered by generic questions so they can be accurately tested for 
  # answerability. Docassemble is lazy about this, but it has limited/no performance impact.
  # If we don't initialize, Docassemble doesn't know if the question can be answered.
  client
  advocate
  adverse_parties
--- 
id: question order
mandatory: True  
code: |
  if not user_logged_in():
    not_signed_in
  sp_files
  the_files
  final_fields
  # show_fields
  if signature_choice == 'paper':
    set_signatures_empty
  gather_fields(final_fields, exclude=undefinable)   # gather_fields(final_fields) #, exclude=['client.signature','guardian.signature'])
  # undefined_field_question
  #show_undefined_fields
  #if len(undefinable) > 0:
  #  gather_leftover_fields
  download_attachments
---
comment: |
  Load fields from all of the templates
code: |
  final_fields = get_multiple_fields(the_files)
---
code: |
  undefinable = undefinable_fields(final_fields)
---
code: |
  client.signature = DAEmpty()
  set_signatures_empty = True
---
question: Test
fields:
    - test field: test_field  
---
field: show_undefined_fields
question: |

  ${undefinable}}
---
code: |
  the_files = DAList('the_files', object_type = DAObject, elements=[sp_file.as_dafile() for sp_file in sp_files])
---
code: |
  drive_id = o365.get_drive_id("gblsma.sharepoint.com:/sites/helpdesk","Basic_Templates")
  # gather drive_contents
  o365.get_files_in_folder("gblsma.sharepoint.com:/sites/helpdesk", "Basic_Templates", drive_id=drive_id, lazylist=drive_contents)
  drive_contents.gathered = True
  gathered_file_questions = True
---
event: not_signed_in
question: |
  Please sign-in
subquestion: |
  You need to sign-in to use this interview.

  ${action_button_html('https://interviews-dev.gbls.org/authorize/azure',label="Sign-in with your GBLS account", color='primary',icon='sign-in-alt')}
under: |
    
---
id: select a template
question: |
  Select the template(s) you want to use
fields:
  - Template: sp_files
    datatype: object_checkboxes
    choices: drive_contents
    none of the above: False
  - Get the client's signature: signature_choice
    datatype: radio
    choices:
      - Digitally: digital
        help: |
          Note that this will work only if the template includes a signature field
      - On paper: paper
    default: digital
---
code: |
  # ask this separately so we know
  undefined_field_question = undefinable_fields_code(final_fields)  
---
question: |
  Remaining questions
subquestion: |
  Provide an answer for each field below.  
fields:
  - code: |
      undefinable_fields_code(final_fields)
continue button field: gather_leftover_fields
---
if: |
  not the_files[i].mimetype == 'application/pdf'
attachment:
  name: ${the_files[i].filename.rsplit('.', 1)[0]}
  filename: ${the_files[i].filename.rsplit('.', 1)[0]}
  variable name: the_files[i].attachment
  docx template file:
    code: |
     the_files[i]
---
if: |
  the_files[i].mimetype == 'application/pdf'
attachment:
  name: ${the_files[i].filename.rsplit('.', 1)[0]}
  filename: ${the_files[i].filename.rsplit('.', 1)[0]}
  variable name: the_files[i].attachment
  pdf template file:
    code: |
      the_files[i]
  code: |
    pdf_fields_code(final_fields)
---
event: download_attachments
question: |
  Your documents are ready
attachment code: |
  [item.attachment for item in the_files]
---
comment: |
  Debugging
event: show_fields
question: |
  The fields
subquestion: |
  ${final_fields}

  